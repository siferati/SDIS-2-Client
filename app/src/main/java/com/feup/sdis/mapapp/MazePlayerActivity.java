package com.feup.sdis.mapapp;

import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.maps.android.PolyUtil;

import java.util.ArrayList;

/**
 * This class implements the Maze Player activity
 * It's where the user can play a maze he downloaded from the server
 */
public class MazePlayerActivity extends AppCompatActivity implements OnMapReadyCallback {

    /** GoogleMap */
    private GoogleMap map = null;

    /** List of all polylines that make up this maze */
    private ArrayList<Polyline> maze = new ArrayList<>();

    /** Entrance to the maze */
    private Marker entrance = null;

    /** Exit to the maze */
    private Marker exit = null;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maze_player);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map_maze_player);
        mapFragment.getMapAsync(this);
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {

        map = googleMap;

        UiSettings uiSettings = map.getUiSettings();

        // disable toolbar when clicking markers
        uiSettings.setMapToolbarEnabled(false);

        LatLngBounds feup = new LatLngBounds(new LatLng(41.177509, -8.598646), new LatLng(41.179133, -8.593830));
        // can't scroll past feup bounds
        map.setLatLngBoundsForCameraTarget(feup);
        map.setMinZoomPreference(17);
        // center camera on feup
        map.moveCamera(CameraUpdateFactory.newLatLngZoom(feup.getCenter(), 18));

        // TODO download maze from server and remove hardcoded stuff
        Polyline polyline1 = map.addPolyline(new PolylineOptions()
                .addAll(PolyUtil.decode("ayizFjcns@F@??@???@???@?????@???@???@??@@????@@???@@??@@??@?@@????@???@??@??@??????@@A@???@???@??@@???@@?A@???@???@@@?????@???@??@????@???@????@@?@?????@???@???@?????@@???@@?@?????@@???@@A?@??@??@???@@??@?A?@@?A?@@???@@?A@?@@@?????B???@?@???@???@A????@???@?@??A??@?@?@A@???@???@???@A??@?@?@A@???@A@???@?????@???@?@???@?@A??@??A@@??@?@??AB?????@A??@?@???@???@?@???@??A?A@?????@????A@???@?@A@?@?????BA??@?B?@?@A@@??@?@A@?@?@A@?@?@??A@?B?BA@AB@?A??@???@A@???@???@??A??@?@???@A@@@A??@?@??A??@?@???@?@A??@???@"))
                .color(Color.BLUE));

        Polyline polyline2 = map.addPolyline(new PolylineOptions()
                .addAll(PolyUtil.decode("gvizF`ens@F???@?????@???@???@?????@?@???@????@?@???@???B???@?@???B?????@???@?@???@?@???@???@?B?@?@?@?@?@???B?@??A@???@???@?@?????@A@?@???@?@???@?@???@?@?@?@???B???@?????@?@???@?@?@???@???B???@??@@???@@@??"))
                .color(Color.BLUE));

        Polyline polyline3 = map.addPolyline(new PolylineOptions()
                .addAll(PolyUtil.decode("uuizF`ens@DC?A?A?A?C@C?A?A?A???A?A?A?C?C?A?A?A???A?A?A?A?A?C?A?A?A???A???A?A?C?A@C?C?A?A@C?A?A???A?A?A??"))
                .color(Color.BLUE));

        Polyline polyline4 = map.addPolyline(new PolylineOptions()
                .addAll(PolyUtil.decode("uuizFjhns@DD?????@@?@@?A?@?@@???@??@@????@??@??@@??@??@?????@????@@?@???@???@@??????@??@@???@???@@@@@??@??@???@???@@??@@??@???@????@@??@?A@@??@?????@??@?@@???@??@@???@@??@@????@????@@?@???@???@@??@????@??@?@???@?"))
                .color(Color.BLUE));

        Polyline polyline5 = map.addPolyline(new PolylineOptions()
                .addAll(PolyUtil.decode("quizFrhns@CFA@??A@???@A??@A??BAA?@?@??A??@A??????@??A??@A@@??@A??@A??@??A@???@A@???@??A??@????A?????A???A????@?@A?@??@A@???@?@A??@?@A????@A@????A@?@??A@?@A@??A@"))
                .color(Color.BLUE));

        maze.add(polyline1);
        maze.add(polyline2);
        maze.add(polyline3);
        maze.add(polyline4);
        maze.add(polyline5);

        entrance = map.addMarker(new MarkerOptions()
                .position(new LatLng(41.17919904393778, -8.597205094993114))
                .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)));

        exit = map.addMarker(new MarkerOptions()
                .position(new LatLng(41.17829134579214, -8.598243109881878))
                .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)));
    }
}
